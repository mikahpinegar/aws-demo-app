AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  # Bucket where lambda code lives
  LambdaCodeBucket:
    Type: String
    Description: "LambdaCodeBucket"

Resources:
  # Users dynamo db table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED

  # Health metrics dynamo db table
  HealthMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HealthMetrics
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED
  
  # Appointments dynamo db table
  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Appointments
      AttributeDefinitions:
        - AttributeName: appointmentId
          AttributeType: S
      KeySchema:
        - AttributeName: appointmentId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED

  # Notifications dynamo db table
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Notifications
      AttributeDefinitions:
        - AttributeName: notificationId
          AttributeType: S
      KeySchema:
        - AttributeName: notificationId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED
  
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDynamoDBExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/HealthMetrics
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Appointments
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole  # Added CloudWatch Logs permissions
  
  # API Gateway RestApi
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties: 
      Name: 'mikahpinegar api gateway'

  # API Gateway Resource for users
  UsersResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties: 
      ParentId: 
        Fn::GetAtt: 
          - ApiGatewayRestApi
          - RootResourceId
      PathPart: 'users'
      RestApiId: 
        Ref: 'ApiGatewayRestApi'

  # API Gateway Resource for /users/{userId}
  UserIdResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties: 
      ParentId: 
        Ref: 'UsersResource'
      PathPart: '{userId}'
      RestApiId: 
        Ref: 'ApiGatewayRestApi'

  # Method for creating a user
  CreateUserMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: 
        Ref: 'UsersResource'
      RestApiId: 
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserLambda.Arn}/invocations
            - {}

  # Method for getting a user
  GetUserMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId: 
        Ref: 'UserIdResource'
      RestApiId: 
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserLambda.Arn}/invocations
            - {}

  # Method for updating a user
  UpdateUserMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: 'NONE'
      HttpMethod: 'PUT'
      ResourceId: 
        Ref: 'UserIdResource'
      RestApiId: 
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserLambda.Arn}/invocations
            - {}

  # Method for deleting a user
  DeleteUserMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties: 
      AuthorizationType: 'NONE'
      HttpMethod: 'DELETE'
      ResourceId: 
        Ref: 'UserIdResource'
      RestApiId: 
        Ref: 'ApiGatewayRestApi'
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserLambda.Arn}/invocations
            - {}

  # Deployment
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties: 
      RestApiId: 
        Ref: 'ApiGatewayRestApi'
      StageName: 'prod'
    DependsOn: 
      - CreateUserMethod
      - GetUserMethod
      - UpdateUserMethod
      - DeleteUserMethod

  # API Gateway Custom Domain Name
  ApiGatewayDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties: 
      DomainName: 'api.mikahpinegar.com'
      CertificateArn: 'arn:aws:acm:us-east-1:021891616196:certificate/a969aff5-df43-4cb4-bcdd-573c102f55c7'

  # Base path mapping
  BasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties: 
      DomainName: 
        Ref: 'ApiGatewayDomainName'
      RestApiId: 
        Ref: 'ApiGatewayRestApi'
      Stage: 'prod'

  # Lambda for creating users in the user table
  CreateUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateUserLambda
      Handler: src/handlers/users/createUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
    
  # User lambda permission for API gateway
  CreateLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: 
        Ref: 'CreateUserLambda'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: 
        Fn::Sub: 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/users
          - {}

  # Lambda for getting user from the user table
  GetUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetUserLambda
      Handler: src/handlers/users/getUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  # Get user lambda permission for API gateway
  GetLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: 
        Ref: 'GetUserLambda'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: 
        Fn::Sub: 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/users/{userId}
          - {}

  # Lambda for updating user from the user table
  UpdateUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateUserLambda
      Handler: src/handlers/users/updateUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  # Update a user lambda permission for API gateway
  UpdateLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: 
        Ref: 'UpdateUserLambda'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: 
        Fn::Sub: 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/PUT/users/{userId}
          - {}

  # Lambda for deleting user from the user table
  DeleteUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteUserLambda
      Handler: src/handlers/users/deleteUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
  
  # Delete user lambda permission for API gateway
  DeleteLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: 
        Ref: 'DeleteUserLambda'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: 
        Fn::Sub: 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/DELETE/users/{userId}
          - {}

Outputs:
  UsersTableName:
    Description: "The name of the Users table"
    Value: !Ref UsersTable

  HealthMetricsTableName:
    Description: "The name of the HealthMetrics table"
    Value: !Ref HealthMetricsTable

  AppointmentsTableName:
    Description: "The name of the Appointments table"
    Value: !Ref AppointmentsTable

  NotificationsTableName:
    Description: "The name of the Notifications table"
    Value: !Ref NotificationsTable