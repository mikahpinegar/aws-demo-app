AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LambdaCodeBucket:
    Type: String
    Description: "LambdaCodeBucket"

Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED

  HealthMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HealthMetrics
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED

  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Appointments
      AttributeDefinitions:
        - AttributeName: appointmentId
          AttributeType: S
      KeySchema:
        - AttributeName: appointmentId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Notifications
      AttributeDefinitions:
        - AttributeName: notificationId
          AttributeType: S
      KeySchema:
        - AttributeName: notificationId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PROVISIONED
  
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDynamoDBExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/HealthMetrics
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Appointments
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications

  CreateUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateUserLambda
      Handler: src/handlers/users/createUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  GetUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetUserLambda
      Handler: src/handlers/users/getUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  UpdateUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateUserLambda
      Handler: src/handlers/users/updateUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  DeleteUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteUserLambda
      Handler: src/handlers/users/deleteUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-code.zip
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

Outputs:
  UsersTableName:
    Description: "The name of the Users table"
    Value: !Ref UsersTable

  HealthMetricsTableName:
    Description: "The name of the HealthMetrics table"
    Value: !Ref HealthMetricsTable

  AppointmentsTableName:
    Description: "The name of the Appointments table"
    Value: !Ref AppointmentsTable

  NotificationsTableName:
    Description: "The name of the Notifications table"
    Value: !Ref NotificationsTable